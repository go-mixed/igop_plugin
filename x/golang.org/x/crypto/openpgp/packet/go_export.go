// export by github.com/goplus/igop/cmd/qexp

package packet

import (
	q "golang.org/x/crypto/openpgp/packet"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "packet",
		Path: "golang.org/x/crypto/openpgp/packet",
		Deps: map[string]string{
			"bufio":                               "bufio",
			"bytes":                               "bytes",
			"compress/bzip2":                      "bzip2",
			"compress/flate":                      "flate",
			"compress/zlib":                       "zlib",
			"crypto":                              "crypto",
			"crypto/aes":                          "aes",
			"crypto/cipher":                       "cipher",
			"crypto/des":                          "des",
			"crypto/dsa":                          "dsa",
			"crypto/ecdsa":                        "ecdsa",
			"crypto/elliptic":                     "elliptic",
			"crypto/md5":                          "md5",
			"crypto/rand":                         "rand",
			"crypto/rsa":                          "rsa",
			"crypto/sha1":                         "sha1",
			"crypto/sha256":                       "sha256",
			"crypto/sha512":                       "sha512",
			"crypto/subtle":                       "subtle",
			"encoding/asn1":                       "asn1",
			"encoding/binary":                     "binary",
			"fmt":                                 "fmt",
			"golang.org/x/crypto/cast5":           "cast5",
			"golang.org/x/crypto/openpgp/elgamal": "elgamal",
			"golang.org/x/crypto/openpgp/errors":  "errors",
			"golang.org/x/crypto/openpgp/s2k":     "s2k",
			"hash":                                "hash",
			"image":                               "image",
			"image/jpeg":                          "jpeg",
			"io":                                  "io",
			"math/big":                            "big",
			"math/bits":                           "bits",
			"strconv":                             "strconv",
			"strings":                             "strings",
			"time":                                "time",
		},
		Interfaces: map[string]reflect.Type{
			"Packet": reflect.TypeOf((*q.Packet)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"CipherFunction":         reflect.TypeOf((*q.CipherFunction)(nil)).Elem(),
			"Compressed":             reflect.TypeOf((*q.Compressed)(nil)).Elem(),
			"CompressionAlgo":        reflect.TypeOf((*q.CompressionAlgo)(nil)).Elem(),
			"CompressionConfig":      reflect.TypeOf((*q.CompressionConfig)(nil)).Elem(),
			"Config":                 reflect.TypeOf((*q.Config)(nil)).Elem(),
			"EncryptedKey":           reflect.TypeOf((*q.EncryptedKey)(nil)).Elem(),
			"LiteralData":            reflect.TypeOf((*q.LiteralData)(nil)).Elem(),
			"OCFBResyncOption":       reflect.TypeOf((*q.OCFBResyncOption)(nil)).Elem(),
			"OnePassSignature":       reflect.TypeOf((*q.OnePassSignature)(nil)).Elem(),
			"OpaquePacket":           reflect.TypeOf((*q.OpaquePacket)(nil)).Elem(),
			"OpaqueReader":           reflect.TypeOf((*q.OpaqueReader)(nil)).Elem(),
			"OpaqueSubpacket":        reflect.TypeOf((*q.OpaqueSubpacket)(nil)).Elem(),
			"PrivateKey":             reflect.TypeOf((*q.PrivateKey)(nil)).Elem(),
			"PublicKey":              reflect.TypeOf((*q.PublicKey)(nil)).Elem(),
			"PublicKeyAlgorithm":     reflect.TypeOf((*q.PublicKeyAlgorithm)(nil)).Elem(),
			"PublicKeyV3":            reflect.TypeOf((*q.PublicKeyV3)(nil)).Elem(),
			"Reader":                 reflect.TypeOf((*q.Reader)(nil)).Elem(),
			"Signature":              reflect.TypeOf((*q.Signature)(nil)).Elem(),
			"SignatureType":          reflect.TypeOf((*q.SignatureType)(nil)).Elem(),
			"SignatureV3":            reflect.TypeOf((*q.SignatureV3)(nil)).Elem(),
			"SymmetricKeyEncrypted":  reflect.TypeOf((*q.SymmetricKeyEncrypted)(nil)).Elem(),
			"SymmetricallyEncrypted": reflect.TypeOf((*q.SymmetricallyEncrypted)(nil)).Elem(),
			"UserAttribute":          reflect.TypeOf((*q.UserAttribute)(nil)).Elem(),
			"UserId":                 reflect.TypeOf((*q.UserId)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars:       map[string]reflect.Value{},
		Funcs: map[string]reflect.Value{
			"NewDSAPrivateKey":                reflect.ValueOf(q.NewDSAPrivateKey),
			"NewDSAPublicKey":                 reflect.ValueOf(q.NewDSAPublicKey),
			"NewECDSAPrivateKey":              reflect.ValueOf(q.NewECDSAPrivateKey),
			"NewECDSAPublicKey":               reflect.ValueOf(q.NewECDSAPublicKey),
			"NewElGamalPrivateKey":            reflect.ValueOf(q.NewElGamalPrivateKey),
			"NewElGamalPublicKey":             reflect.ValueOf(q.NewElGamalPublicKey),
			"NewOCFBDecrypter":                reflect.ValueOf(q.NewOCFBDecrypter),
			"NewOCFBEncrypter":                reflect.ValueOf(q.NewOCFBEncrypter),
			"NewOpaqueReader":                 reflect.ValueOf(q.NewOpaqueReader),
			"NewRSAPrivateKey":                reflect.ValueOf(q.NewRSAPrivateKey),
			"NewRSAPublicKey":                 reflect.ValueOf(q.NewRSAPublicKey),
			"NewReader":                       reflect.ValueOf(q.NewReader),
			"NewSignerPrivateKey":             reflect.ValueOf(q.NewSignerPrivateKey),
			"NewUserAttribute":                reflect.ValueOf(q.NewUserAttribute),
			"NewUserAttributePhoto":           reflect.ValueOf(q.NewUserAttributePhoto),
			"NewUserId":                       reflect.ValueOf(q.NewUserId),
			"OpaqueSubpackets":                reflect.ValueOf(q.OpaqueSubpackets),
			"Read":                            reflect.ValueOf(q.Read),
			"SerializeCompressed":             reflect.ValueOf(q.SerializeCompressed),
			"SerializeEncryptedKey":           reflect.ValueOf(q.SerializeEncryptedKey),
			"SerializeLiteral":                reflect.ValueOf(q.SerializeLiteral),
			"SerializeSymmetricKeyEncrypted":  reflect.ValueOf(q.SerializeSymmetricKeyEncrypted),
			"SerializeSymmetricallyEncrypted": reflect.ValueOf(q.SerializeSymmetricallyEncrypted),
		},
		TypedConsts: map[string]igop.TypedConst{
			"Cipher3DES":               {reflect.TypeOf(q.Cipher3DES), constant.MakeInt64(int64(q.Cipher3DES))},
			"CipherAES128":             {reflect.TypeOf(q.CipherAES128), constant.MakeInt64(int64(q.CipherAES128))},
			"CipherAES192":             {reflect.TypeOf(q.CipherAES192), constant.MakeInt64(int64(q.CipherAES192))},
			"CipherAES256":             {reflect.TypeOf(q.CipherAES256), constant.MakeInt64(int64(q.CipherAES256))},
			"CipherCAST5":              {reflect.TypeOf(q.CipherCAST5), constant.MakeInt64(int64(q.CipherCAST5))},
			"CompressionNone":          {reflect.TypeOf(q.CompressionNone), constant.MakeInt64(int64(q.CompressionNone))},
			"CompressionZIP":           {reflect.TypeOf(q.CompressionZIP), constant.MakeInt64(int64(q.CompressionZIP))},
			"CompressionZLIB":          {reflect.TypeOf(q.CompressionZLIB), constant.MakeInt64(int64(q.CompressionZLIB))},
			"OCFBNoResync":             {reflect.TypeOf(q.OCFBNoResync), constant.MakeBool(bool(q.OCFBNoResync))},
			"OCFBResync":               {reflect.TypeOf(q.OCFBResync), constant.MakeBool(bool(q.OCFBResync))},
			"PubKeyAlgoDSA":            {reflect.TypeOf(q.PubKeyAlgoDSA), constant.MakeInt64(int64(q.PubKeyAlgoDSA))},
			"PubKeyAlgoECDH":           {reflect.TypeOf(q.PubKeyAlgoECDH), constant.MakeInt64(int64(q.PubKeyAlgoECDH))},
			"PubKeyAlgoECDSA":          {reflect.TypeOf(q.PubKeyAlgoECDSA), constant.MakeInt64(int64(q.PubKeyAlgoECDSA))},
			"PubKeyAlgoElGamal":        {reflect.TypeOf(q.PubKeyAlgoElGamal), constant.MakeInt64(int64(q.PubKeyAlgoElGamal))},
			"PubKeyAlgoRSA":            {reflect.TypeOf(q.PubKeyAlgoRSA), constant.MakeInt64(int64(q.PubKeyAlgoRSA))},
			"PubKeyAlgoRSAEncryptOnly": {reflect.TypeOf(q.PubKeyAlgoRSAEncryptOnly), constant.MakeInt64(int64(q.PubKeyAlgoRSAEncryptOnly))},
			"PubKeyAlgoRSASignOnly":    {reflect.TypeOf(q.PubKeyAlgoRSASignOnly), constant.MakeInt64(int64(q.PubKeyAlgoRSASignOnly))},
			"SigTypeBinary":            {reflect.TypeOf(q.SigTypeBinary), constant.MakeInt64(int64(q.SigTypeBinary))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"BestCompression":              {"untyped int", constant.MakeInt64(int64(q.BestCompression))},
			"BestSpeed":                    {"untyped int", constant.MakeInt64(int64(q.BestSpeed))},
			"DefaultCompression":           {"untyped int", constant.MakeInt64(int64(q.DefaultCompression))},
			"KeyFlagCertify":               {"untyped int", constant.MakeInt64(int64(q.KeyFlagCertify))},
			"KeyFlagEncryptCommunications": {"untyped int", constant.MakeInt64(int64(q.KeyFlagEncryptCommunications))},
			"KeyFlagEncryptStorage":        {"untyped int", constant.MakeInt64(int64(q.KeyFlagEncryptStorage))},
			"KeyFlagSign":                  {"untyped int", constant.MakeInt64(int64(q.KeyFlagSign))},
			"NoCompression":                {"untyped int", constant.MakeInt64(int64(q.NoCompression))},
			"SigTypeCasualCert":            {"untyped int", constant.MakeInt64(int64(q.SigTypeCasualCert))},
			"SigTypeDirectSignature":       {"untyped int", constant.MakeInt64(int64(q.SigTypeDirectSignature))},
			"SigTypeGenericCert":           {"untyped int", constant.MakeInt64(int64(q.SigTypeGenericCert))},
			"SigTypeKeyRevocation":         {"untyped int", constant.MakeInt64(int64(q.SigTypeKeyRevocation))},
			"SigTypePersonaCert":           {"untyped int", constant.MakeInt64(int64(q.SigTypePersonaCert))},
			"SigTypePositiveCert":          {"untyped int", constant.MakeInt64(int64(q.SigTypePositiveCert))},
			"SigTypePrimaryKeyBinding":     {"untyped int", constant.MakeInt64(int64(q.SigTypePrimaryKeyBinding))},
			"SigTypeSubkeyBinding":         {"untyped int", constant.MakeInt64(int64(q.SigTypeSubkeyBinding))},
			"SigTypeSubkeyRevocation":      {"untyped int", constant.MakeInt64(int64(q.SigTypeSubkeyRevocation))},
			"SigTypeText":                  {"untyped int", constant.MakeInt64(int64(q.SigTypeText))},
			"UserAttrImageSubpacket":       {"untyped int", constant.MakeInt64(int64(q.UserAttrImageSubpacket))},
		},
	})
}
