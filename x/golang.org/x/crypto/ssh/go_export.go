// export by github.com/goplus/igop/cmd/qexp

package ssh

import (
	q "golang.org/x/crypto/ssh"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "ssh",
		Path: "golang.org/x/crypto/ssh",
		Deps: map[string]string{
			"bufio":                                 "bufio",
			"bytes":                                 "bytes",
			"crypto":                                "crypto",
			"crypto/aes":                            "aes",
			"crypto/cipher":                         "cipher",
			"crypto/des":                            "des",
			"crypto/dsa":                            "dsa",
			"crypto/ecdsa":                          "ecdsa",
			"crypto/elliptic":                       "elliptic",
			"crypto/hmac":                           "hmac",
			"crypto/md5":                            "md5",
			"crypto/rand":                           "rand",
			"crypto/rc4":                            "rc4",
			"crypto/rsa":                            "rsa",
			"crypto/sha1":                           "sha1",
			"crypto/sha256":                         "sha256",
			"crypto/sha512":                         "sha512",
			"crypto/subtle":                         "subtle",
			"crypto/x509":                           "x509",
			"encoding/asn1":                         "asn1",
			"encoding/base64":                       "base64",
			"encoding/binary":                       "binary",
			"encoding/hex":                          "hex",
			"encoding/pem":                          "pem",
			"errors":                                "errors",
			"fmt":                                   "fmt",
			"golang.org/x/crypto/chacha20":          "chacha20",
			"golang.org/x/crypto/curve25519":        "curve25519",
			"golang.org/x/crypto/ed25519":           "ed25519",
			"golang.org/x/crypto/internal/poly1305": "poly1305",
			"golang.org/x/crypto/ssh/internal/bcrypt_pbkdf": "bcrypt_pbkdf",
			"hash":        "hash",
			"io":          "io",
			"log":         "log",
			"math":        "math",
			"math/big":    "big",
			"math/rand":   "rand",
			"net":         "net",
			"os":          "os",
			"reflect":     "reflect",
			"sort":        "sort",
			"strconv":     "strconv",
			"strings":     "strings",
			"sync":        "sync",
			"sync/atomic": "atomic",
			"time":        "time",
		},
		Interfaces: map[string]reflect.Type{
			"AlgorithmSigner": reflect.TypeOf((*q.AlgorithmSigner)(nil)).Elem(),
			"AuthMethod":      reflect.TypeOf((*q.AuthMethod)(nil)).Elem(),
			"Channel":         reflect.TypeOf((*q.Channel)(nil)).Elem(),
			"Conn":            reflect.TypeOf((*q.Conn)(nil)).Elem(),
			"ConnMetadata":    reflect.TypeOf((*q.ConnMetadata)(nil)).Elem(),
			"CryptoPublicKey": reflect.TypeOf((*q.CryptoPublicKey)(nil)).Elem(),
			"GSSAPIClient":    reflect.TypeOf((*q.GSSAPIClient)(nil)).Elem(),
			"GSSAPIServer":    reflect.TypeOf((*q.GSSAPIServer)(nil)).Elem(),
			"NewChannel":      reflect.TypeOf((*q.NewChannel)(nil)).Elem(),
			"PublicKey":       reflect.TypeOf((*q.PublicKey)(nil)).Elem(),
			"Signer":          reflect.TypeOf((*q.Signer)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"BannerCallback":               reflect.TypeOf((*q.BannerCallback)(nil)).Elem(),
			"CertChecker":                  reflect.TypeOf((*q.CertChecker)(nil)).Elem(),
			"Certificate":                  reflect.TypeOf((*q.Certificate)(nil)).Elem(),
			"Client":                       reflect.TypeOf((*q.Client)(nil)).Elem(),
			"ClientConfig":                 reflect.TypeOf((*q.ClientConfig)(nil)).Elem(),
			"Config":                       reflect.TypeOf((*q.Config)(nil)).Elem(),
			"ExitError":                    reflect.TypeOf((*q.ExitError)(nil)).Elem(),
			"ExitMissingError":             reflect.TypeOf((*q.ExitMissingError)(nil)).Elem(),
			"GSSAPIWithMICConfig":          reflect.TypeOf((*q.GSSAPIWithMICConfig)(nil)).Elem(),
			"HostKeyCallback":              reflect.TypeOf((*q.HostKeyCallback)(nil)).Elem(),
			"KeyboardInteractiveChallenge": reflect.TypeOf((*q.KeyboardInteractiveChallenge)(nil)).Elem(),
			"OpenChannelError":             reflect.TypeOf((*q.OpenChannelError)(nil)).Elem(),
			"PassphraseMissingError":       reflect.TypeOf((*q.PassphraseMissingError)(nil)).Elem(),
			"Permissions":                  reflect.TypeOf((*q.Permissions)(nil)).Elem(),
			"RejectionReason":              reflect.TypeOf((*q.RejectionReason)(nil)).Elem(),
			"Request":                      reflect.TypeOf((*q.Request)(nil)).Elem(),
			"ServerAuthError":              reflect.TypeOf((*q.ServerAuthError)(nil)).Elem(),
			"ServerConfig":                 reflect.TypeOf((*q.ServerConfig)(nil)).Elem(),
			"ServerConn":                   reflect.TypeOf((*q.ServerConn)(nil)).Elem(),
			"Session":                      reflect.TypeOf((*q.Session)(nil)).Elem(),
			"Signal":                       reflect.TypeOf((*q.Signal)(nil)).Elem(),
			"Signature":                    reflect.TypeOf((*q.Signature)(nil)).Elem(),
			"TerminalModes":                reflect.TypeOf((*q.TerminalModes)(nil)).Elem(),
			"Waitmsg":                      reflect.TypeOf((*q.Waitmsg)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{},
		Vars: map[string]reflect.Value{
			"ErrNoAuth": reflect.ValueOf(&q.ErrNoAuth),
		},
		Funcs: map[string]reflect.Value{
			"BannerDisplayStderr":              reflect.ValueOf(q.BannerDisplayStderr),
			"Dial":                             reflect.ValueOf(q.Dial),
			"DiscardRequests":                  reflect.ValueOf(q.DiscardRequests),
			"FingerprintLegacyMD5":             reflect.ValueOf(q.FingerprintLegacyMD5),
			"FingerprintSHA256":                reflect.ValueOf(q.FingerprintSHA256),
			"FixedHostKey":                     reflect.ValueOf(q.FixedHostKey),
			"GSSAPIWithMICAuthMethod":          reflect.ValueOf(q.GSSAPIWithMICAuthMethod),
			"InsecureIgnoreHostKey":            reflect.ValueOf(q.InsecureIgnoreHostKey),
			"KeyboardInteractive":              reflect.ValueOf(q.KeyboardInteractive),
			"Marshal":                          reflect.ValueOf(q.Marshal),
			"MarshalAuthorizedKey":             reflect.ValueOf(q.MarshalAuthorizedKey),
			"NewCertSigner":                    reflect.ValueOf(q.NewCertSigner),
			"NewClient":                        reflect.ValueOf(q.NewClient),
			"NewClientConn":                    reflect.ValueOf(q.NewClientConn),
			"NewPublicKey":                     reflect.ValueOf(q.NewPublicKey),
			"NewServerConn":                    reflect.ValueOf(q.NewServerConn),
			"NewSignerFromKey":                 reflect.ValueOf(q.NewSignerFromKey),
			"NewSignerFromSigner":              reflect.ValueOf(q.NewSignerFromSigner),
			"ParseAuthorizedKey":               reflect.ValueOf(q.ParseAuthorizedKey),
			"ParseDSAPrivateKey":               reflect.ValueOf(q.ParseDSAPrivateKey),
			"ParseKnownHosts":                  reflect.ValueOf(q.ParseKnownHosts),
			"ParsePrivateKey":                  reflect.ValueOf(q.ParsePrivateKey),
			"ParsePrivateKeyWithPassphrase":    reflect.ValueOf(q.ParsePrivateKeyWithPassphrase),
			"ParsePublicKey":                   reflect.ValueOf(q.ParsePublicKey),
			"ParseRawPrivateKey":               reflect.ValueOf(q.ParseRawPrivateKey),
			"ParseRawPrivateKeyWithPassphrase": reflect.ValueOf(q.ParseRawPrivateKeyWithPassphrase),
			"Password":                         reflect.ValueOf(q.Password),
			"PasswordCallback":                 reflect.ValueOf(q.PasswordCallback),
			"PublicKeys":                       reflect.ValueOf(q.PublicKeys),
			"PublicKeysCallback":               reflect.ValueOf(q.PublicKeysCallback),
			"RetryableAuthMethod":              reflect.ValueOf(q.RetryableAuthMethod),
			"Unmarshal":                        reflect.ValueOf(q.Unmarshal),
		},
		TypedConsts: map[string]igop.TypedConst{
			"ConnectionFailed":   {reflect.TypeOf(q.ConnectionFailed), constant.MakeInt64(int64(q.ConnectionFailed))},
			"Prohibited":         {reflect.TypeOf(q.Prohibited), constant.MakeInt64(int64(q.Prohibited))},
			"ResourceShortage":   {reflect.TypeOf(q.ResourceShortage), constant.MakeInt64(int64(q.ResourceShortage))},
			"SIGABRT":            {reflect.TypeOf(q.SIGABRT), constant.MakeString(string(q.SIGABRT))},
			"SIGALRM":            {reflect.TypeOf(q.SIGALRM), constant.MakeString(string(q.SIGALRM))},
			"SIGFPE":             {reflect.TypeOf(q.SIGFPE), constant.MakeString(string(q.SIGFPE))},
			"SIGHUP":             {reflect.TypeOf(q.SIGHUP), constant.MakeString(string(q.SIGHUP))},
			"SIGILL":             {reflect.TypeOf(q.SIGILL), constant.MakeString(string(q.SIGILL))},
			"SIGINT":             {reflect.TypeOf(q.SIGINT), constant.MakeString(string(q.SIGINT))},
			"SIGKILL":            {reflect.TypeOf(q.SIGKILL), constant.MakeString(string(q.SIGKILL))},
			"SIGPIPE":            {reflect.TypeOf(q.SIGPIPE), constant.MakeString(string(q.SIGPIPE))},
			"SIGQUIT":            {reflect.TypeOf(q.SIGQUIT), constant.MakeString(string(q.SIGQUIT))},
			"SIGSEGV":            {reflect.TypeOf(q.SIGSEGV), constant.MakeString(string(q.SIGSEGV))},
			"SIGTERM":            {reflect.TypeOf(q.SIGTERM), constant.MakeString(string(q.SIGTERM))},
			"SIGUSR1":            {reflect.TypeOf(q.SIGUSR1), constant.MakeString(string(q.SIGUSR1))},
			"SIGUSR2":            {reflect.TypeOf(q.SIGUSR2), constant.MakeString(string(q.SIGUSR2))},
			"UnknownChannelType": {reflect.TypeOf(q.UnknownChannelType), constant.MakeInt64(int64(q.UnknownChannelType))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"CS7":                      {"untyped int", constant.MakeInt64(int64(q.CS7))},
			"CS8":                      {"untyped int", constant.MakeInt64(int64(q.CS8))},
			"CertAlgoDSAv01":           {"untyped string", constant.MakeString(string(q.CertAlgoDSAv01))},
			"CertAlgoECDSA256v01":      {"untyped string", constant.MakeString(string(q.CertAlgoECDSA256v01))},
			"CertAlgoECDSA384v01":      {"untyped string", constant.MakeString(string(q.CertAlgoECDSA384v01))},
			"CertAlgoECDSA521v01":      {"untyped string", constant.MakeString(string(q.CertAlgoECDSA521v01))},
			"CertAlgoED25519v01":       {"untyped string", constant.MakeString(string(q.CertAlgoED25519v01))},
			"CertAlgoRSASHA256v01":     {"untyped string", constant.MakeString(string(q.CertAlgoRSASHA256v01))},
			"CertAlgoRSASHA512v01":     {"untyped string", constant.MakeString(string(q.CertAlgoRSASHA512v01))},
			"CertAlgoRSAv01":           {"untyped string", constant.MakeString(string(q.CertAlgoRSAv01))},
			"CertAlgoSKECDSA256v01":    {"untyped string", constant.MakeString(string(q.CertAlgoSKECDSA256v01))},
			"CertAlgoSKED25519v01":     {"untyped string", constant.MakeString(string(q.CertAlgoSKED25519v01))},
			"CertSigAlgoRSASHA2256v01": {"untyped string", constant.MakeString(string(q.CertSigAlgoRSASHA2256v01))},
			"CertSigAlgoRSASHA2512v01": {"untyped string", constant.MakeString(string(q.CertSigAlgoRSASHA2512v01))},
			"CertSigAlgoRSAv01":        {"untyped string", constant.MakeString(string(q.CertSigAlgoRSAv01))},
			"CertTimeInfinity":         {"untyped int", constant.MakeUint64(uint64(q.CertTimeInfinity))},
			"ECHO":                     {"untyped int", constant.MakeInt64(int64(q.ECHO))},
			"ECHOCTL":                  {"untyped int", constant.MakeInt64(int64(q.ECHOCTL))},
			"ECHOE":                    {"untyped int", constant.MakeInt64(int64(q.ECHOE))},
			"ECHOK":                    {"untyped int", constant.MakeInt64(int64(q.ECHOK))},
			"ECHOKE":                   {"untyped int", constant.MakeInt64(int64(q.ECHOKE))},
			"ECHONL":                   {"untyped int", constant.MakeInt64(int64(q.ECHONL))},
			"HostCert":                 {"untyped int", constant.MakeInt64(int64(q.HostCert))},
			"ICANON":                   {"untyped int", constant.MakeInt64(int64(q.ICANON))},
			"ICRNL":                    {"untyped int", constant.MakeInt64(int64(q.ICRNL))},
			"IEXTEN":                   {"untyped int", constant.MakeInt64(int64(q.IEXTEN))},
			"IGNCR":                    {"untyped int", constant.MakeInt64(int64(q.IGNCR))},
			"IGNPAR":                   {"untyped int", constant.MakeInt64(int64(q.IGNPAR))},
			"IMAXBEL":                  {"untyped int", constant.MakeInt64(int64(q.IMAXBEL))},
			"INLCR":                    {"untyped int", constant.MakeInt64(int64(q.INLCR))},
			"INPCK":                    {"untyped int", constant.MakeInt64(int64(q.INPCK))},
			"ISIG":                     {"untyped int", constant.MakeInt64(int64(q.ISIG))},
			"ISTRIP":                   {"untyped int", constant.MakeInt64(int64(q.ISTRIP))},
			"IUCLC":                    {"untyped int", constant.MakeInt64(int64(q.IUCLC))},
			"IUTF8":                    {"untyped int", constant.MakeInt64(int64(q.IUTF8))},
			"IXANY":                    {"untyped int", constant.MakeInt64(int64(q.IXANY))},
			"IXOFF":                    {"untyped int", constant.MakeInt64(int64(q.IXOFF))},
			"IXON":                     {"untyped int", constant.MakeInt64(int64(q.IXON))},
			"KeyAlgoDSA":               {"untyped string", constant.MakeString(string(q.KeyAlgoDSA))},
			"KeyAlgoECDSA256":          {"untyped string", constant.MakeString(string(q.KeyAlgoECDSA256))},
			"KeyAlgoECDSA384":          {"untyped string", constant.MakeString(string(q.KeyAlgoECDSA384))},
			"KeyAlgoECDSA521":          {"untyped string", constant.MakeString(string(q.KeyAlgoECDSA521))},
			"KeyAlgoED25519":           {"untyped string", constant.MakeString(string(q.KeyAlgoED25519))},
			"KeyAlgoRSA":               {"untyped string", constant.MakeString(string(q.KeyAlgoRSA))},
			"KeyAlgoRSASHA256":         {"untyped string", constant.MakeString(string(q.KeyAlgoRSASHA256))},
			"KeyAlgoRSASHA512":         {"untyped string", constant.MakeString(string(q.KeyAlgoRSASHA512))},
			"KeyAlgoSKECDSA256":        {"untyped string", constant.MakeString(string(q.KeyAlgoSKECDSA256))},
			"KeyAlgoSKED25519":         {"untyped string", constant.MakeString(string(q.KeyAlgoSKED25519))},
			"NOFLSH":                   {"untyped int", constant.MakeInt64(int64(q.NOFLSH))},
			"OCRNL":                    {"untyped int", constant.MakeInt64(int64(q.OCRNL))},
			"OLCUC":                    {"untyped int", constant.MakeInt64(int64(q.OLCUC))},
			"ONLCR":                    {"untyped int", constant.MakeInt64(int64(q.ONLCR))},
			"ONLRET":                   {"untyped int", constant.MakeInt64(int64(q.ONLRET))},
			"ONOCR":                    {"untyped int", constant.MakeInt64(int64(q.ONOCR))},
			"OPOST":                    {"untyped int", constant.MakeInt64(int64(q.OPOST))},
			"PARENB":                   {"untyped int", constant.MakeInt64(int64(q.PARENB))},
			"PARMRK":                   {"untyped int", constant.MakeInt64(int64(q.PARMRK))},
			"PARODD":                   {"untyped int", constant.MakeInt64(int64(q.PARODD))},
			"PENDIN":                   {"untyped int", constant.MakeInt64(int64(q.PENDIN))},
			"SigAlgoRSA":               {"untyped string", constant.MakeString(string(q.SigAlgoRSA))},
			"SigAlgoRSASHA2256":        {"untyped string", constant.MakeString(string(q.SigAlgoRSASHA2256))},
			"SigAlgoRSASHA2512":        {"untyped string", constant.MakeString(string(q.SigAlgoRSASHA2512))},
			"TOSTOP":                   {"untyped int", constant.MakeInt64(int64(q.TOSTOP))},
			"TTY_OP_ISPEED":            {"untyped int", constant.MakeInt64(int64(q.TTY_OP_ISPEED))},
			"TTY_OP_OSPEED":            {"untyped int", constant.MakeInt64(int64(q.TTY_OP_OSPEED))},
			"UserCert":                 {"untyped int", constant.MakeInt64(int64(q.UserCert))},
			"VDISCARD":                 {"untyped int", constant.MakeInt64(int64(q.VDISCARD))},
			"VDSUSP":                   {"untyped int", constant.MakeInt64(int64(q.VDSUSP))},
			"VEOF":                     {"untyped int", constant.MakeInt64(int64(q.VEOF))},
			"VEOL":                     {"untyped int", constant.MakeInt64(int64(q.VEOL))},
			"VEOL2":                    {"untyped int", constant.MakeInt64(int64(q.VEOL2))},
			"VERASE":                   {"untyped int", constant.MakeInt64(int64(q.VERASE))},
			"VFLUSH":                   {"untyped int", constant.MakeInt64(int64(q.VFLUSH))},
			"VINTR":                    {"untyped int", constant.MakeInt64(int64(q.VINTR))},
			"VKILL":                    {"untyped int", constant.MakeInt64(int64(q.VKILL))},
			"VLNEXT":                   {"untyped int", constant.MakeInt64(int64(q.VLNEXT))},
			"VQUIT":                    {"untyped int", constant.MakeInt64(int64(q.VQUIT))},
			"VREPRINT":                 {"untyped int", constant.MakeInt64(int64(q.VREPRINT))},
			"VSTART":                   {"untyped int", constant.MakeInt64(int64(q.VSTART))},
			"VSTATUS":                  {"untyped int", constant.MakeInt64(int64(q.VSTATUS))},
			"VSTOP":                    {"untyped int", constant.MakeInt64(int64(q.VSTOP))},
			"VSUSP":                    {"untyped int", constant.MakeInt64(int64(q.VSUSP))},
			"VSWTCH":                   {"untyped int", constant.MakeInt64(int64(q.VSWTCH))},
			"VWERASE":                  {"untyped int", constant.MakeInt64(int64(q.VWERASE))},
			"XCASE":                    {"untyped int", constant.MakeInt64(int64(q.XCASE))},
		},
	})
}
